{"ast":null,"code":"import * as types from \"../../types\";\nconst initialState = {\n  size: {},\n  listTopping: [],\n  orderValue: 0\n};\n\nconst orderReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.SELECT_SIZE:\n      {\n        const sizeValue = action.payload.price;\n        const toppingValue = state.listTopping.reduce((value, element) => value + element.price, 0);\n        return { ...state,\n          size: action.payload,\n          orderValue: sizeValue + toppingValue\n        };\n      }\n\n    case types.SELECT_TOPPING:\n      {\n        const newList = [...state.listTopping];\n        const index = newList.findIndex(item => item.id === action.payload.id);\n\n        if (index < 0) {\n          newList.push(action.payload);\n        } else {\n          newList.splice(index, 1);\n        }\n\n        console.log(newList);\n        const sizeValue = state.size.price || 0;\n        const toppingValue = newList.reduce((value, element) => value + element.price, 0);\n        console.log(sizeValue, toppingValue);\n        return { ...state,\n          listTopping: newList,\n          orderValue: sizeValue + toppingValue\n        };\n      }\n\n    case types.CLEAR_STATE:\n      {\n        return { ...state,\n          size: {},\n          listTopping: [],\n          orderValue: 0\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default orderReducer;","map":{"version":3,"sources":["/Users/huunguyent./Desktop/untitled folder 2/homework1/src/store/reducers/ordered.js"],"names":["types","initialState","size","listTopping","orderValue","orderReducer","state","action","type","SELECT_SIZE","sizeValue","payload","price","toppingValue","reduce","value","element","SELECT_TOPPING","newList","index","findIndex","item","id","push","splice","console","log","CLEAR_STATE"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,aAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,WAAW,EAAE,EAFM;AAGnBC,EAAAA,UAAU,EAAE;AAHO,CAArB;;AAKA,MAAMC,YAAY,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBL,YAAyB;AAAA,MAAXM,MAAW;;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,KAAK,CAACS,WAAX;AAAwB;AACtB,cAAMC,SAAS,GAAGH,MAAM,CAACI,OAAP,CAAeC,KAAjC;AACA,cAAMC,YAAY,GAAGP,KAAK,CAACH,WAAN,CAAkBW,MAAlB,CAAyB,CAACC,KAAD,EAAQC,OAAR,KAAoBD,KAAK,GAAGC,OAAO,CAACJ,KAA7D,EAAoE,CAApE,CAArB;AAEA,eAAO,EACL,GAAGN,KADE;AAELJ,UAAAA,IAAI,EAAEK,MAAM,CAACI,OAFR;AAGLP,UAAAA,UAAU,EAAEM,SAAS,GAAGG;AAHnB,SAAP;AAKD;;AACD,SAAKb,KAAK,CAACiB,cAAX;AAA2B;AACzB,cAAMC,OAAO,GAAG,CAAC,GAAGZ,KAAK,CAACH,WAAV,CAAhB;AACA,cAAMgB,KAAK,GAAGD,OAAO,CAACE,SAAR,CAAkBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYf,MAAM,CAACI,OAAP,CAAeW,EAArD,CAAd;;AACA,YAAIH,KAAK,GAAG,CAAZ,EAAe;AACbD,UAAAA,OAAO,CAACK,IAAR,CAAahB,MAAM,CAACI,OAApB;AACD,SAFD,MAEO;AACLO,UAAAA,OAAO,CAACM,MAAR,CAAeL,KAAf,EAAsB,CAAtB;AACD;;AACDM,QAAAA,OAAO,CAACC,GAAR,CAAYR,OAAZ;AACA,cAAMR,SAAS,GAAGJ,KAAK,CAACJ,IAAN,CAAWU,KAAX,IAAoB,CAAtC;AACA,cAAMC,YAAY,GAAGK,OAAO,CAACJ,MAAR,CAAe,CAACC,KAAD,EAAQC,OAAR,KAAoBD,KAAK,GAAGC,OAAO,CAACJ,KAAnD,EAA0D,CAA1D,CAArB;AACAa,QAAAA,OAAO,CAACC,GAAR,CAAYhB,SAAZ,EAAuBG,YAAvB;AACA,eAAO,EACL,GAAGP,KADE;AAELH,UAAAA,WAAW,EAAEe,OAFR;AAGLd,UAAAA,UAAU,EAAEM,SAAS,GAAGG;AAHnB,SAAP;AAKD;;AAED,SAAKb,KAAK,CAAC2B,WAAX;AAAwB;AACtB,eAAO,EACL,GAAGrB,KADE;AAELJ,UAAAA,IAAI,EAAE,EAFD;AAGLC,UAAAA,WAAW,EAAE,EAHR;AAILC,UAAAA,UAAU,EAAE;AAJP,SAAP;AAMD;;AACD;AACE,aAAOE,KAAP;AAvCJ;AAyCD,CA1CD;;AA2CA,eAAeD,YAAf","sourcesContent":["import * as types from \"../../types\"\n\nconst initialState = {\n  size: {},\n  listTopping: [],\n  orderValue: 0,\n}\nconst orderReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.SELECT_SIZE: {\n      const sizeValue = action.payload.price;\n      const toppingValue = state.listTopping.reduce((value, element) => value + element.price, 0);\n\n      return {\n        ...state,\n        size: action.payload,\n        orderValue: sizeValue + toppingValue,\n      }\n    }\n    case types.SELECT_TOPPING: {\n      const newList = [...state.listTopping];\n      const index = newList.findIndex(item => item.id === action.payload.id);\n      if (index < 0) {\n        newList.push(action.payload)\n      } else {\n        newList.splice(index, 1);\n      }\n      console.log(newList)\n      const sizeValue = state.size.price || 0;\n      const toppingValue = newList.reduce((value, element) => value + element.price, 0);\n      console.log(sizeValue, toppingValue)\n      return {\n        ...state,\n        listTopping: newList,\n        orderValue: sizeValue + toppingValue,\n      }\n    }\n\n    case types.CLEAR_STATE: {\n      return {\n        ...state,\n        size: {},\n        listTopping: [],\n        orderValue: 0,\n      }\n    }\n    default:\n      return state;\n  }\n};\nexport default orderReducer;\n"]},"metadata":{},"sourceType":"module"}